find_program(
  SPHINX_EXECUTABLE
  NAMES sphinx-build
  DOC "Path to sphinx-build executable")

# handle REQUIRED and QUIET arguments, set SPHINX_FOUND variable
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
  Sphinx "Unable to locate sphinx-build executable" SPHINX_EXECUTABLE)
  

function(sphinx_add_docs _target)
  set(_opts VERBOSE)
  set(_single_opts BUILDER OUTPUT_DIR SOURCE_DIR CONFIG_DIR ROOT_DOC)
  set(_multi_opts BREATHE_PROJECTS)
  cmake_parse_arguments(_args "${_opts}" "${_single_opts}" "${_multi_opts}" ${ARGN})

  unset(SPHINX_BREATHE_PROJECTS)

  if(NOT _args_BUILDER)
    message(FATAL_ERROR "Sphinx builder (BUILDER) not specified for target ${_target} (html, pdf or epub)")
  elseif(NOT _args_SOURCE_DIR)
    message(FATAL_ERROR "Sphinx source directory not specified for target ${_target}")
  elseif(NOT _args_CONFIG_DIR)
    message(FATAL_ERROR "Sphinx config directory (CONFIG_DIR) not specified for target ${_target}")
  else()
    if(NOT IS_ABSOLUTE "${_args_SOURCE_DIR}")
      get_filename_component(_sourcedir "${_args_SOURCE_DIR}" ABSOLUTE)
    else()
      set(_sourcedir "${_args_SOURCE_DIR}")
    endif()
    if(NOT IS_DIRECTORY "${_sourcedir}")
      message(FATAL_ERROR "Sphinx source directory '${_sourcedir}' for"
                          "target ${_target} does not exist")
    endif()
  endif()

  set(_builder "${_args_BUILDER}")
  if(_args_OUTPUT_DIR)
    set(_outputdir "${_args_OUTPUT_DIR}")
  else()
    set(_outputdir "${CMAKE_CURRENT_BINARY_DIR}/${_target}")
  endif()

  

  set(_sourcedir "${_args_SOURCE_DIR}")
  set(_configdir "${_args_CONFIG_DIR}")
  

  if (_args_VERBOSE)
    set(_additional_options "-v")
  endif()

  if (_args_ROOT_DOC)
    set(_root_doc "${_args_ROOT_DOC}")
  endif()

#  if(_args_BREATHE_PROJECTS)
#    if(NOT Sphinx_breathe_FOUND)
#      message(FATAL_ERROR "Sphinx extension 'breathe' is not available. Needed"
#                          "by sphinx_add_docs for target ${_target}")
#    endif()
#    list(APPEND SPHINX_EXTENSIONS breathe)#

#    foreach(_doxygen_target ${_args_BREATHE_PROJECTS})
#      if(TARGET ${_doxygen_target})
#        list(APPEND _depends ${_doxygen_target})#

#        # Doxygen targets are supported. Verify that a Doxyfile exists.
#        get_target_property(_dir ${_doxygen_target} BINARY_DIR)
#        set(_doxyfile "${_dir}/Doxyfile.${_doxygen_target}")
#        if(NOT EXISTS "${_doxyfile}")
#          message(FATAL_ERROR "Target ${_doxygen_target} is not a Doxygen"
#                              "target, needed by sphinx_add_docs for target"
#                              "${_target}")
#        endif()

#        # Read the Doxyfile, verify XML generation is enabled and retrieve the
#        # output directory.
#        file(READ "${_doxyfile}" _contents)
#        if(NOT _contents MATCHES "GENERATE_XML *= *YES")
#          message(FATAL_ERROR "Doxygen target ${_doxygen_target} does not"
#                              "generate XML, needed by sphinx_add_docs for"
#                              "target ${_target}")
#        elseif(_contents MATCHES "OUTPUT_DIRECTORY *= *([^ ][^\n]*)")
#          string(STRIP "${CMAKE_MATCH_1}" _dir)
#          set(_name "${_doxygen_target}")
#          set(_dir "${_dir}/xml")
#        else()
#          message(FATAL_ERROR "Cannot parse Doxyfile generated by Doxygen"
#                              "target ${_doxygen_target}, needed by"
#                              "sphinx_add_docs for target ${_target}")
#        endif()
#      elseif(_doxygen_target MATCHES "([^: ]+) *: *(.*)")
#        set(_name "${CMAKE_MATCH_1}")
#        string(STRIP "${CMAKE_MATCH_2}" _dir)
#      endif()#

#      if(_name AND _dir)
#        if(_breathe_projects)
#          set(_breathe_projects "${_breathe_projects}, \"${_name}\": \"${_dir}\"")
#        else()
#          set(_breathe_projects "\"${_name}\": \"${_dir}\"")
#        endif()
#        if(NOT _breathe_default_project)
#          set(_breathe_default_project "${_name}")
#        endif()
#      endif()
#    endforeach()
#  endif()

  set(_cachedir "${CMAKE_CURRENT_BINARY_DIR}/${_target}.cache")
  file(MAKE_DIRECTORY "${_cachedir}")
  if(EXISTS "${_configdir}/_static")
    file(COPY "${_configdir}/_static" DESTINATION "${_cachedir}")
  else()
    file(MAKE_DIRECTORY "${_cachedir}/_static")
  endif()
  if(EXISTS "${_configdir}/_templates")
    file(COPY "${_configdir}/_templates" DESTINATION "${_cachedir}")
  else()
    file(MAKE_DIRECTORY "${_cachedir}/_templates")
  endif()

  if(EXISTS "${_configdir}/conf.py.in")
    configure_file("${_configdir}/conf.py.in" "${_cachedir}/conf.py" @ONLY)
 # else()
 #   _Sphinx_generate_confpy(${_target} "${_cachedir}")
  endif()



 if(_breathe_projects)
   file(APPEND "${_cachedir}/conf.py"
     "\nbreathe_projects = { ${_breathe_projects} }"
     "\nbreathe_default_project = '${_breathe_default_project}'")
 endif()

  if(_root_doc)
  file(APPEND "${_cachedir}/conf.py"
    "\nroot_doc = ${_root_doc}")
  endif()
  

  #string(REPLACE " " ";" _Sphinx_executable ${SPHINX_BUILD_EXECUTABLE})
  add_custom_target(
    ${_target} ALL
    COMMAND ${SPHINX_EXECUTABLE}
              -b ${_builder}
              -d "${CMAKE_CURRENT_BINARY_DIR}/${_target}.cache/_doctrees"
              -c "${CMAKE_CURRENT_BINARY_DIR}/${_target}.cache"
              ${_additional_options}
              "${_sourcedir}"
              "${_outputdir}"
    DEPENDS ${_depends}
    COMMENT "Generating documentation with Sphinx (${_builder})"
    VERBATIM
  )
  unset(_Sphinx_executable)
endfunction()
